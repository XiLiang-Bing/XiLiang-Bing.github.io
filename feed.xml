<?xml version="1.0" encoding="UTF-8"?><rss version="2.0">
  <channel>
    <title>Bing.Go</title>
    <link>http://blog.nocn.me/</link>
    <description>I love GoLang, blog based on Pugo build.</description>
    <managingEditor>xiliang_bing@outlook.com (夕凉)</managingEditor>
    <pubDate>Mon, 06 Nov 2017 21:55:55 +0800</pubDate>
    <item>
      <title>Git https、http 方式设置记住用户名及密码</title>
      <link>http://blog.nocn.me/2017/11/8/git-project.html</link>
      <description>&lt;p&gt;Git 使用 https、http 方式时，每次都要手动输入密码，按照如下方法设置后，只需输入一次密码，以后再不用承受手动输入密码的困扰。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;设置记住密码（默认15分钟）：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global credential.helper cache&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;自定义密码失效时间（一小时之后失效）：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config credential.helper &#39;cache --timeout=3600&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;长期存储密码（推荐一）：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global credential.helper store`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;小提示：增加远程地址时加上用户名和密码也是可以的（推荐二）&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git remote add origin http://username:password@git.oschina.net/name/project.git &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;补充：使用客户端也可以存储密码。&lt;/p&gt;&#xA;</description>
      <author>夕凉</author>
      <pubDate>Wed, 08 Nov 2017 11:11:00 +0000</pubDate>
    </item>
    <item>
      <title>Git 常用命令</title>
      <link>http://blog.nocn.me/2017/11/7/git-command.html</link>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;初始化一个版本库&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git init&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;克隆远程版本库&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone &amp;lt;url&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;添加远程版本库&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git remote add origin &amp;lt;url&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;查看远程仓库&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git remote -v&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;提交修改到暂存区，有三种模式可以选择（&lt;strong&gt;三选一&lt;/strong&gt;）&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;// 提交所有变化&#xA;git add -A&#xA;// 提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)&#xA;git add -u&#xA;// 提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件&#xA;git add .&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;提交修改&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git commit -m &amp;quot;提交说明&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;推送到远程仓库&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git push origin master&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;查看文件状态&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git status&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;跟踪指定文件&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git add readme.txt&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;从当前跟踪列表移除文件，并删除本地文件&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git rm readme.txt&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;仅从暂存区删除，仍保留本地文件&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git rm -cached readme.txt&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;重命名文件&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git mv reademe.txt readme.html&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;查看提交历史&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git log&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;修改最后一次提交的提交注释&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git commit --amend&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;创建一个分支&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git branch &amp;lt;name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;切换工作目录&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git chekcout &amp;lt;name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;删除分支&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git branch -d &amp;lt;name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;查看所有分支（有*号的为当前分支）&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git branch&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;查看远程仓库的信息&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git remote show origin&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;强制掩盖远程分支&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; git push origin &amp;lt;name&amp;gt; --force&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
      <author>夕凉</author>
      <pubDate>Tue, 07 Nov 2017 22:30:00 +0000</pubDate>
    </item>
    <item>
      <title>GoLang 中的递归</title>
      <link>http://blog.nocn.me/2017/11/6/golang-recursive.html</link>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;递归，就是在运行的过程中调用自身。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func adder() {&#xA;adder() // 调用函数自身&#xA;}&#xA;&#xA;func main() {&#xA;adder()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;注意：GoLang支持递归。但使用递归时需要设置退出条件，否则会是一个死循环。&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;递归函数对于解决数学上的问题非常有用，例如计算阶乘，生成斐波那契数列等。&lt;/p&gt;&#xA;&#xA;&lt;h2 id=&#34;阶乘&#34;&gt;阶乘&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;以下实例通过 Go 语言的递归函数实例阶乘：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &amp;quot;fmt&amp;quot;&#xA;&#xA;func Factorial(x int) (result int) {&#xA;  if x == 0 {&#xA;    result = 1&#xA;  } else {&#xA;    result = x * Factorial(x - 1)&#xA;  }&#xA;  return&#xA;}&#xA;&#xA;func main() {  &#xA;    var i int = 15&#xA;    fmt.Println(i, &amp;quot;的阶乘是&amp;quot;, Factorial(i))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;输出结果如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;15 的阶乘是 1307674368000&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2 id=&#34;斐波那契数列&#34;&gt;斐波那契数列&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;以下实例通过 Go 语言的递归函数实现斐波那契数列：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &amp;quot;fmt&amp;quot;&#xA;&#xA;func fibonaci(n int) int {&#xA;  if n &amp;lt; 2 {&#xA;   return n&#xA;  }&#xA;  return fibonaci(n-2) + fibonaci(n-1)&#xA;}&#xA;&#xA;func main() {&#xA;    var i int&#xA;    for i = 0; i &amp;lt; 10; i++ {&#xA;       fmt.Println(fibonaci(i), &amp;quot;\t&amp;quot;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;输出结果如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;0        1        1        2        3        5        8        13        21        34&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
      <author>夕凉</author>
      <pubDate>Mon, 06 Nov 2017 19:09:00 +0000</pubDate>
    </item>
    <item>
      <title>Hello Pugo!</title>
      <link>http://blog.nocn.me/2017/10/18/welcome.html</link>
      <description>&lt;h4 id=&#34;介绍&#34;&gt;介绍&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;当您阅读本文时，表明&lt;code&gt;PuGo&lt;/code&gt;已成功运行。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;此文章是从 &lt;code&gt;source/welcome.md&lt;/code&gt; 生成的。 您可以学习它，并尝试编写自己的文章。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;文章的信息，如标题，作者等，都由&lt;code&gt;Markdown&lt;/code&gt;中的&lt;code&gt;toml&lt;/code&gt;代码块定义.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# 文章标题(必填)&#xA;title = &amp;quot;Welcome&amp;quot;&#xA;&#xA;# 文章标签&#xA;# 用于建立永久链接(必填).&#xA;slug = &amp;quot;welcome&amp;quot;&#xA;&#xA;# 文章描述&#xA;# 显示在 HTML 头部的 meta 标签中.&#xA;desc = &amp;quot;welcome to try pugo site generator&amp;quot;&#xA;&#xA;# 文章发布时间&#xA;# 格式: 2015-11-28, 2015-11-28 12:28, 2015-11-28 12:28:38&#xA;date = &amp;quot;2017-10-18 22:20&amp;quot;&#xA;&#xA;# 文章更新时间(可选)&#xA;# 如果为空，将使用发布时间&#xA;update_date = &amp;quot;2017-10-19 22:04&amp;quot;&#xA;&#xA;# 作者标识符(必填)&#xA;# 参考 meta [[author]]&#xA;author = &amp;quot;pugo&amp;quot;&#xA;&#xA;# 文章标签(可选)&#xA;tags = [&amp;quot;pugo&amp;quot;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h4 id=&#34;内容&#34;&gt;内容&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;内容是第一次保存后的数据。 所有内容将被解析为&lt;code&gt;Markdown&lt;/code&gt;内容。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;当您阅读本文时，表明`PuGo`已成功运行。&#xA;&#xA;此文章是从 `source/welcome.md` 生成的。 您可以学习它，并尝试编写自己的文章。&#xA;&#xA;...... (Markdown 内容)&#xA;&#xA;Markdown 是一种轻量级的标记语言，设计了纯文本格式化语法&#xA;以便可以使用相同名称的工具将其转换为 HTML 和许多其他格式。&#xA;&#xA;Markdown 通常用于设置自述文件的格式，用于在线论坛上撰写邮件，&#xA;并使用纯文本编辑器创建富文本。&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
      <author>夕凉</author>
      <pubDate>Wed, 18 Oct 2017 22:20:00 +0000</pubDate>
    </item>
    <item>
      <title>GoLang 闭包与匿名函数</title>
      <link>http://blog.nocn.me/2017/10/18/golang-closure-func.html</link>
      <description>&lt;h4 id=&#34;golang-匿名函数&#34;&gt;GoLang 匿名函数&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &amp;quot;fmt&amp;quot;&#xA;    &amp;quot;reflect&amp;quot;&#xA;)&#xA;&#xA;func main() {&#xA;    // 匿名函数 1&#xA;    f := func(i, j int) (result int) {&#xA;        result = i + j&#xA;        return&#xA;    } // 创建匿名函数并返回函数指针(内存地址)&#xA;&#xA;    fmt.Println(f, f(1, 3))&#xA;    fmt.Println(reflect.TypeOf(f), reflect.TypeOf(f(1, 3)))&#xA;&#xA;    // 匿名函数 2&#xA;    func(i, j int) {&#xA;        fmt.Println(j, i)&#xA;    }(1, 9) // 创建匿名函数并执行(函数调用)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;0x4965b0 4&#xA;func(int, int) int int&#xA;9 1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h4 id=&#34;golang-闭包&#34;&gt;GoLang 闭包&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &amp;quot;fmt&amp;quot;&#xA;)&#xA;&#xA;func adder() func(int) int {&#xA;    sum := 0&#xA;    return func(x int) int { // 返回一个函数类型(在Go中函数也是一种变量,可以作为值或类型. 它的类型就是所有拥有相同的参数，相同的返回值的一种类型.)&#xA;        sum += x&#xA;        return sum&#xA;    }&#xA;}&#xA;&#xA;func main() {&#xA;    pos, neg := adder(), adder()&#xA;    for i := 0; i &amp;lt; 10; i++ {&#xA;        fmt.Println(pos(i), neg(-2*i))&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;0 0&#xA;1 -2&#xA;3 -6&#xA;6 -12&#xA;10 -20&#xA;15 -30&#xA;21 -42&#xA;28 -56&#xA;36 -72&#xA;45 -90&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
      <author>夕凉</author>
      <pubDate>Wed, 18 Oct 2017 00:37:00 +0000</pubDate>
    </item>
  </channel>
</rss>